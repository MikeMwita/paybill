// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// BillCreation defines model for BillCreation.
type BillCreation struct {
	Amount      float32            `json:"amount"`
	Description *string            `json:"description,omitempty"`
	DueDate     openapi_types.Date `json:"dueDate"`
}

// BillUpdate defines model for BillUpdate.
type BillUpdate struct {
	Amount      *float32            `json:"amount,omitempty"`
	Description *string             `json:"description,omitempty"`
	DueDate     *openapi_types.Date `json:"dueDate,omitempty"`
}

// FeedbackRating defines model for FeedbackRating.
type FeedbackRating struct {
	// Comment Additional comments or feedback from the user
	Comment *string `json:"comment,omitempty"`

	// MerchantId The ID of the merchant being rated
	MerchantId string `json:"merchantId"`

	// Rating The numerical rating given by the user (e.g., 1-5)
	Rating float32 `json:"rating"`
}

// GoalCreation defines model for GoalCreation.
type GoalCreation struct {
	// Amount The target amount for the financial goal
	Amount float32 `json:"amount"`

	// Name The name or description of the financial goal
	Name string `json:"name"`
}

// GoalUpdate defines model for GoalUpdate.
type GoalUpdate struct {
	// Amount The updated target amount for the financial goal
	Amount *float32 `json:"amount,omitempty"`

	// Name The updated name or description of the financial goal
	Name *string `json:"name,omitempty"`
}

// IntegrationConnect defines model for IntegrationConnect.
type IntegrationConnect struct {
	ApiKey      string                  `json:"apiKey"`
	Credentials *map[string]interface{} `json:"credentials,omitempty"`
	Platform    string                  `json:"platform"`
}

// NotificationSend defines model for NotificationSend.
type NotificationSend struct {
	Date      time.Time           `json:"date"`
	Message   string              `json:"message"`
	Recipient openapi_types.Email `json:"recipient"`
}

// PasswordReset defines model for PasswordReset.
type PasswordReset struct {
	Password string `json:"password"`
}

// PasswordResetRequest defines model for PasswordResetRequest.
type PasswordResetRequest struct {
	Email openapi_types.Email `json:"email"`
}

// ReportGeneration defines model for ReportGeneration.
type ReportGeneration struct {
	EndDate   openapi_types.Date `json:"endDate"`
	StartDate openapi_types.Date `json:"startDate"`
	Type      string             `json:"type"`
}

// UserLogin defines model for UserLogin.
type UserLogin struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// UserProfileUpdate defines model for UserProfileUpdate.
type UserProfileUpdate struct {
	Email    openapi_types.Email `json:"email"`
	Username string              `json:"username"`
}

// UserRegistration defines model for UserRegistration.
type UserRegistration struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
	Username string              `json:"username"`
}

// PostApiAuthLoginJSONRequestBody defines body for PostApiAuthLogin for application/json ContentType.
type PostApiAuthLoginJSONRequestBody = UserLogin

// PutApiAuthProfileJSONRequestBody defines body for PutApiAuthProfile for application/json ContentType.
type PutApiAuthProfileJSONRequestBody = UserProfileUpdate

// PostApiAuthRegisterJSONRequestBody defines body for PostApiAuthRegister for application/json ContentType.
type PostApiAuthRegisterJSONRequestBody = UserRegistration

// PostApiAuthResetJSONRequestBody defines body for PostApiAuthReset for application/json ContentType.
type PostApiAuthResetJSONRequestBody = PasswordResetRequest

// PutApiAuthResetTokenJSONRequestBody defines body for PutApiAuthResetToken for application/json ContentType.
type PutApiAuthResetTokenJSONRequestBody = PasswordReset

// PostApiBillsJSONRequestBody defines body for PostApiBills for application/json ContentType.
type PostApiBillsJSONRequestBody = BillCreation

// PutApiBillsIdJSONRequestBody defines body for PutApiBillsId for application/json ContentType.
type PutApiBillsIdJSONRequestBody = BillUpdate

// PostApiFeedbackJSONRequestBody defines body for PostApiFeedback for application/json ContentType.
type PostApiFeedbackJSONRequestBody = FeedbackRating

// PostApiGoalsJSONRequestBody defines body for PostApiGoals for application/json ContentType.
type PostApiGoalsJSONRequestBody = GoalCreation

// PutApiGoalsIdJSONRequestBody defines body for PutApiGoalsId for application/json ContentType.
type PutApiGoalsIdJSONRequestBody = GoalUpdate

// PostApiIntegrationsJSONRequestBody defines body for PostApiIntegrations for application/json ContentType.
type PostApiIntegrationsJSONRequestBody = IntegrationConnect

// PostApiNotificationsJSONRequestBody defines body for PostApiNotifications for application/json ContentType.
type PostApiNotificationsJSONRequestBody = NotificationSend

// PostApiReportsJSONRequestBody defines body for PostApiReports for application/json ContentType.
type PostApiReportsJSONRequestBody = ReportGeneration

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApiAuthLoginWithBody request with any body
	PostApiAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthLogin(ctx context.Context, body PostApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthLogout request
	PostApiAuthLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiAuthProfile request
	GetApiAuthProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiAuthProfileWithBody request with any body
	PutApiAuthProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiAuthProfile(ctx context.Context, body PutApiAuthProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthRefresh request
	PostApiAuthRefresh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthRegisterWithBody request with any body
	PostApiAuthRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthRegister(ctx context.Context, body PostApiAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthResetWithBody request with any body
	PostApiAuthResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthReset(ctx context.Context, body PostApiAuthResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiAuthResetTokenWithBody request with any body
	PutApiAuthResetTokenWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiAuthResetToken(ctx context.Context, token string, body PutApiAuthResetTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthVerify request
	PostApiAuthVerify(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiAuthVerifyToken request
	GetApiAuthVerifyToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBills request
	GetApiBills(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBillsWithBody request with any body
	PostApiBillsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBills(ctx context.Context, body PostApiBillsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiBillsId request
	DeleteApiBillsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBillsId request
	GetApiBillsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiBillsIdWithBody request with any body
	PutApiBillsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiBillsId(ctx context.Context, id string, body PutApiBillsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBillsIdPay request
	PostApiBillsIdPay(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiFeedback request
	GetApiFeedback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiFeedbackWithBody request with any body
	PostApiFeedbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiFeedback(ctx context.Context, body PostApiFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiFeedbackId request
	DeleteApiFeedbackId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiFeedbackId request
	GetApiFeedbackId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiGoals request
	GetApiGoals(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiGoalsWithBody request with any body
	PostApiGoalsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiGoals(ctx context.Context, body PostApiGoalsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiGoalsId request
	DeleteApiGoalsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiGoalsId request
	GetApiGoalsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiGoalsIdWithBody request with any body
	PutApiGoalsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiGoalsId(ctx context.Context, id string, body PutApiGoalsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiIntegrations request
	GetApiIntegrations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiIntegrationsWithBody request with any body
	PostApiIntegrationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiIntegrations(ctx context.Context, body PostApiIntegrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiIntegrationsId request
	DeleteApiIntegrationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiIntegrationsId request
	GetApiIntegrationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiNotifications request
	GetApiNotifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiNotificationsWithBody request with any body
	PostApiNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiNotifications(ctx context.Context, body PostApiNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiNotificationsId request
	DeleteApiNotificationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiNotificationsId request
	GetApiNotificationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiReports request
	GetApiReports(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiReportsWithBody request with any body
	PostApiReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiReports(ctx context.Context, body PostApiReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiReportsId request
	DeleteApiReportsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiReportsId request
	GetApiReportsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApiAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthLogin(ctx context.Context, body PostApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiAuthProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAuthProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiAuthProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiAuthProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiAuthProfile(ctx context.Context, body PutApiAuthProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiAuthProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthRefresh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRefreshRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthRegister(ctx context.Context, body PostApiAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthResetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthReset(ctx context.Context, body PostApiAuthResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthResetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiAuthResetTokenWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiAuthResetTokenRequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiAuthResetToken(ctx context.Context, token string, body PutApiAuthResetTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiAuthResetTokenRequest(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthVerify(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthVerifyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiAuthVerifyToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAuthVerifyTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBills(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBillsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBillsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBillsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBills(ctx context.Context, body PostApiBillsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBillsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiBillsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiBillsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBillsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBillsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiBillsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiBillsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiBillsId(ctx context.Context, id string, body PutApiBillsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiBillsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBillsIdPay(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBillsIdPayRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiFeedback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiFeedbackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiFeedbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiFeedbackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiFeedback(ctx context.Context, body PostApiFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiFeedbackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiFeedbackId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiFeedbackIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiFeedbackId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiFeedbackIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiGoals(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiGoalsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiGoalsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiGoalsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiGoals(ctx context.Context, body PostApiGoalsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiGoalsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiGoalsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiGoalsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiGoalsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiGoalsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiGoalsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiGoalsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiGoalsId(ctx context.Context, id string, body PutApiGoalsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiGoalsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiIntegrations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiIntegrationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiIntegrationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiIntegrationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiIntegrations(ctx context.Context, body PostApiIntegrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiIntegrationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiIntegrationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiIntegrationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiIntegrationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiIntegrationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiNotifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiNotificationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiNotificationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiNotifications(ctx context.Context, body PostApiNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiNotificationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiNotificationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiNotificationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiNotificationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiNotificationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiReports(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiReportsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiReportsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiReports(ctx context.Context, body PostApiReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiReportsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiReportsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiReportsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiReportsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiReportsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApiAuthLoginRequest calls the generic PostApiAuthLogin builder with application/json body
func NewPostApiAuthLoginRequest(server string, body PostApiAuthLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAuthLoginRequestWithBody generates requests for PostApiAuthLogin with any type of body
func NewPostApiAuthLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthLogoutRequest generates requests for PostApiAuthLogout
func NewPostApiAuthLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiAuthProfileRequest generates requests for GetApiAuthProfile
func NewGetApiAuthProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiAuthProfileRequest calls the generic PutApiAuthProfile builder with application/json body
func NewPutApiAuthProfileRequest(server string, body PutApiAuthProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiAuthProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiAuthProfileRequestWithBody generates requests for PutApiAuthProfile with any type of body
func NewPutApiAuthProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthRefreshRequest generates requests for PostApiAuthRefresh
func NewPostApiAuthRefreshRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiAuthRegisterRequest calls the generic PostApiAuthRegister builder with application/json body
func NewPostApiAuthRegisterRequest(server string, body PostApiAuthRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAuthRegisterRequestWithBody generates requests for PostApiAuthRegister with any type of body
func NewPostApiAuthRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthResetRequest calls the generic PostApiAuthReset builder with application/json body
func NewPostApiAuthResetRequest(server string, body PostApiAuthResetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthResetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAuthResetRequestWithBody generates requests for PostApiAuthReset with any type of body
func NewPostApiAuthResetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiAuthResetTokenRequest calls the generic PutApiAuthResetToken builder with application/json body
func NewPutApiAuthResetTokenRequest(server string, token string, body PutApiAuthResetTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiAuthResetTokenRequestWithBody(server, token, "application/json", bodyReader)
}

// NewPutApiAuthResetTokenRequestWithBody generates requests for PutApiAuthResetToken with any type of body
func NewPutApiAuthResetTokenRequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/reset/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthVerifyRequest generates requests for PostApiAuthVerify
func NewPostApiAuthVerifyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiAuthVerifyTokenRequest generates requests for GetApiAuthVerifyToken
func NewGetApiAuthVerifyTokenRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/verify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBillsRequest generates requests for GetApiBills
func NewGetApiBillsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bills")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiBillsRequest calls the generic PostApiBills builder with application/json body
func NewPostApiBillsRequest(server string, body PostApiBillsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBillsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiBillsRequestWithBody generates requests for PostApiBills with any type of body
func NewPostApiBillsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bills")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiBillsIdRequest generates requests for DeleteApiBillsId
func NewDeleteApiBillsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bills/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBillsIdRequest generates requests for GetApiBillsId
func NewGetApiBillsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bills/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiBillsIdRequest calls the generic PutApiBillsId builder with application/json body
func NewPutApiBillsIdRequest(server string, id string, body PutApiBillsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiBillsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiBillsIdRequestWithBody generates requests for PutApiBillsId with any type of body
func NewPutApiBillsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bills/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBillsIdPayRequest generates requests for PostApiBillsIdPay
func NewPostApiBillsIdPayRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bills/%s/pay", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiFeedbackRequest generates requests for GetApiFeedback
func NewGetApiFeedbackRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feedback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiFeedbackRequest calls the generic PostApiFeedback builder with application/json body
func NewPostApiFeedbackRequest(server string, body PostApiFeedbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiFeedbackRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiFeedbackRequestWithBody generates requests for PostApiFeedback with any type of body
func NewPostApiFeedbackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feedback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiFeedbackIdRequest generates requests for DeleteApiFeedbackId
func NewDeleteApiFeedbackIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feedback/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiFeedbackIdRequest generates requests for GetApiFeedbackId
func NewGetApiFeedbackIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feedback/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiGoalsRequest generates requests for GetApiGoals
func NewGetApiGoalsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/goals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiGoalsRequest calls the generic PostApiGoals builder with application/json body
func NewPostApiGoalsRequest(server string, body PostApiGoalsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiGoalsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiGoalsRequestWithBody generates requests for PostApiGoals with any type of body
func NewPostApiGoalsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/goals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiGoalsIdRequest generates requests for DeleteApiGoalsId
func NewDeleteApiGoalsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/goals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiGoalsIdRequest generates requests for GetApiGoalsId
func NewGetApiGoalsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/goals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiGoalsIdRequest calls the generic PutApiGoalsId builder with application/json body
func NewPutApiGoalsIdRequest(server string, id string, body PutApiGoalsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiGoalsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiGoalsIdRequestWithBody generates requests for PutApiGoalsId with any type of body
func NewPutApiGoalsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/goals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiIntegrationsRequest generates requests for GetApiIntegrations
func NewGetApiIntegrationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/integrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiIntegrationsRequest calls the generic PostApiIntegrations builder with application/json body
func NewPostApiIntegrationsRequest(server string, body PostApiIntegrationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiIntegrationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiIntegrationsRequestWithBody generates requests for PostApiIntegrations with any type of body
func NewPostApiIntegrationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/integrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiIntegrationsIdRequest generates requests for DeleteApiIntegrationsId
func NewDeleteApiIntegrationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiIntegrationsIdRequest generates requests for GetApiIntegrationsId
func NewGetApiIntegrationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiNotificationsRequest generates requests for GetApiNotifications
func NewGetApiNotificationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiNotificationsRequest calls the generic PostApiNotifications builder with application/json body
func NewPostApiNotificationsRequest(server string, body PostApiNotificationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiNotificationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiNotificationsRequestWithBody generates requests for PostApiNotifications with any type of body
func NewPostApiNotificationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiNotificationsIdRequest generates requests for DeleteApiNotificationsId
func NewDeleteApiNotificationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiNotificationsIdRequest generates requests for GetApiNotificationsId
func NewGetApiNotificationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiReportsRequest generates requests for GetApiReports
func NewGetApiReportsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/reports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiReportsRequest calls the generic PostApiReports builder with application/json body
func NewPostApiReportsRequest(server string, body PostApiReportsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiReportsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiReportsRequestWithBody generates requests for PostApiReports with any type of body
func NewPostApiReportsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/reports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiReportsIdRequest generates requests for DeleteApiReportsId
func NewDeleteApiReportsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/reports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiReportsIdRequest generates requests for GetApiReportsId
func NewGetApiReportsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/reports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApiAuthLoginWithBodyWithResponse request with any body
	PostApiAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error)

	PostApiAuthLoginWithResponse(ctx context.Context, body PostApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error)

	// PostApiAuthLogoutWithResponse request
	PostApiAuthLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiAuthLogoutResponse, error)

	// GetApiAuthProfileWithResponse request
	GetApiAuthProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiAuthProfileResponse, error)

	// PutApiAuthProfileWithBodyWithResponse request with any body
	PutApiAuthProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiAuthProfileResponse, error)

	PutApiAuthProfileWithResponse(ctx context.Context, body PutApiAuthProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiAuthProfileResponse, error)

	// PostApiAuthRefreshWithResponse request
	PostApiAuthRefreshWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiAuthRefreshResponse, error)

	// PostApiAuthRegisterWithBodyWithResponse request with any body
	PostApiAuthRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error)

	PostApiAuthRegisterWithResponse(ctx context.Context, body PostApiAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error)

	// PostApiAuthResetWithBodyWithResponse request with any body
	PostApiAuthResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthResetResponse, error)

	PostApiAuthResetWithResponse(ctx context.Context, body PostApiAuthResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResetResponse, error)

	// PutApiAuthResetTokenWithBodyWithResponse request with any body
	PutApiAuthResetTokenWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiAuthResetTokenResponse, error)

	PutApiAuthResetTokenWithResponse(ctx context.Context, token string, body PutApiAuthResetTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiAuthResetTokenResponse, error)

	// PostApiAuthVerifyWithResponse request
	PostApiAuthVerifyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiAuthVerifyResponse, error)

	// GetApiAuthVerifyTokenWithResponse request
	GetApiAuthVerifyTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*GetApiAuthVerifyTokenResponse, error)

	// GetApiBillsWithResponse request
	GetApiBillsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiBillsResponse, error)

	// PostApiBillsWithBodyWithResponse request with any body
	PostApiBillsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBillsResponse, error)

	PostApiBillsWithResponse(ctx context.Context, body PostApiBillsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBillsResponse, error)

	// DeleteApiBillsIdWithResponse request
	DeleteApiBillsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiBillsIdResponse, error)

	// GetApiBillsIdWithResponse request
	GetApiBillsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiBillsIdResponse, error)

	// PutApiBillsIdWithBodyWithResponse request with any body
	PutApiBillsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiBillsIdResponse, error)

	PutApiBillsIdWithResponse(ctx context.Context, id string, body PutApiBillsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiBillsIdResponse, error)

	// PostApiBillsIdPayWithResponse request
	PostApiBillsIdPayWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiBillsIdPayResponse, error)

	// GetApiFeedbackWithResponse request
	GetApiFeedbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiFeedbackResponse, error)

	// PostApiFeedbackWithBodyWithResponse request with any body
	PostApiFeedbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiFeedbackResponse, error)

	PostApiFeedbackWithResponse(ctx context.Context, body PostApiFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiFeedbackResponse, error)

	// DeleteApiFeedbackIdWithResponse request
	DeleteApiFeedbackIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiFeedbackIdResponse, error)

	// GetApiFeedbackIdWithResponse request
	GetApiFeedbackIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiFeedbackIdResponse, error)

	// GetApiGoalsWithResponse request
	GetApiGoalsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiGoalsResponse, error)

	// PostApiGoalsWithBodyWithResponse request with any body
	PostApiGoalsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiGoalsResponse, error)

	PostApiGoalsWithResponse(ctx context.Context, body PostApiGoalsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiGoalsResponse, error)

	// DeleteApiGoalsIdWithResponse request
	DeleteApiGoalsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiGoalsIdResponse, error)

	// GetApiGoalsIdWithResponse request
	GetApiGoalsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiGoalsIdResponse, error)

	// PutApiGoalsIdWithBodyWithResponse request with any body
	PutApiGoalsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiGoalsIdResponse, error)

	PutApiGoalsIdWithResponse(ctx context.Context, id string, body PutApiGoalsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiGoalsIdResponse, error)

	// GetApiIntegrationsWithResponse request
	GetApiIntegrationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiIntegrationsResponse, error)

	// PostApiIntegrationsWithBodyWithResponse request with any body
	PostApiIntegrationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiIntegrationsResponse, error)

	PostApiIntegrationsWithResponse(ctx context.Context, body PostApiIntegrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiIntegrationsResponse, error)

	// DeleteApiIntegrationsIdWithResponse request
	DeleteApiIntegrationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiIntegrationsIdResponse, error)

	// GetApiIntegrationsIdWithResponse request
	GetApiIntegrationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiIntegrationsIdResponse, error)

	// GetApiNotificationsWithResponse request
	GetApiNotificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiNotificationsResponse, error)

	// PostApiNotificationsWithBodyWithResponse request with any body
	PostApiNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiNotificationsResponse, error)

	PostApiNotificationsWithResponse(ctx context.Context, body PostApiNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiNotificationsResponse, error)

	// DeleteApiNotificationsIdWithResponse request
	DeleteApiNotificationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiNotificationsIdResponse, error)

	// GetApiNotificationsIdWithResponse request
	GetApiNotificationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiNotificationsIdResponse, error)

	// GetApiReportsWithResponse request
	GetApiReportsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiReportsResponse, error)

	// PostApiReportsWithBodyWithResponse request with any body
	PostApiReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiReportsResponse, error)

	PostApiReportsWithResponse(ctx context.Context, body PostApiReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiReportsResponse, error)

	// DeleteApiReportsIdWithResponse request
	DeleteApiReportsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiReportsIdResponse, error)

	// GetApiReportsIdWithResponse request
	GetApiReportsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiReportsIdResponse, error)
}

type PostApiAuthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiAuthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiAuthLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiAuthProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiAuthProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAuthProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiAuthProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiAuthProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiAuthProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiAuthRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiAuthRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiAuthResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiAuthResetTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiAuthResetTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiAuthResetTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiAuthVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiAuthVerifyTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiAuthVerifyTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAuthVerifyTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBillsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiBillsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBillsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBillsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBillsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBillsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiBillsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiBillsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiBillsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBillsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiBillsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBillsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiBillsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiBillsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiBillsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBillsIdPayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBillsIdPayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBillsIdPayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiFeedbackIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiFeedbackIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiFeedbackIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiFeedbackIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiFeedbackIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiFeedbackIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiGoalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiGoalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiGoalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiGoalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiGoalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiGoalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiGoalsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiGoalsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiGoalsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiGoalsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiGoalsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiGoalsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiGoalsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiGoalsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiGoalsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiIntegrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiIntegrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiIntegrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiIntegrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiIntegrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiIntegrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiIntegrationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiIntegrationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiIntegrationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiIntegrationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiIntegrationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiIntegrationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiNotificationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiNotificationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiNotificationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiNotificationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiNotificationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiNotificationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiReportsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiReportsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiReportsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiReportsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiReportsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiReportsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApiAuthLoginWithBodyWithResponse request with arbitrary body returning *PostApiAuthLoginResponse
func (c *ClientWithResponses) PostApiAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error) {
	rsp, err := c.PostApiAuthLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLoginResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthLoginWithResponse(ctx context.Context, body PostApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error) {
	rsp, err := c.PostApiAuthLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLoginResponse(rsp)
}

// PostApiAuthLogoutWithResponse request returning *PostApiAuthLogoutResponse
func (c *ClientWithResponses) PostApiAuthLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiAuthLogoutResponse, error) {
	rsp, err := c.PostApiAuthLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLogoutResponse(rsp)
}

// GetApiAuthProfileWithResponse request returning *GetApiAuthProfileResponse
func (c *ClientWithResponses) GetApiAuthProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiAuthProfileResponse, error) {
	rsp, err := c.GetApiAuthProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAuthProfileResponse(rsp)
}

// PutApiAuthProfileWithBodyWithResponse request with arbitrary body returning *PutApiAuthProfileResponse
func (c *ClientWithResponses) PutApiAuthProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiAuthProfileResponse, error) {
	rsp, err := c.PutApiAuthProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiAuthProfileResponse(rsp)
}

func (c *ClientWithResponses) PutApiAuthProfileWithResponse(ctx context.Context, body PutApiAuthProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiAuthProfileResponse, error) {
	rsp, err := c.PutApiAuthProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiAuthProfileResponse(rsp)
}

// PostApiAuthRefreshWithResponse request returning *PostApiAuthRefreshResponse
func (c *ClientWithResponses) PostApiAuthRefreshWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiAuthRefreshResponse, error) {
	rsp, err := c.PostApiAuthRefresh(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthRefreshResponse(rsp)
}

// PostApiAuthRegisterWithBodyWithResponse request with arbitrary body returning *PostApiAuthRegisterResponse
func (c *ClientWithResponses) PostApiAuthRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error) {
	rsp, err := c.PostApiAuthRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthRegisterWithResponse(ctx context.Context, body PostApiAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error) {
	rsp, err := c.PostApiAuthRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthRegisterResponse(rsp)
}

// PostApiAuthResetWithBodyWithResponse request with arbitrary body returning *PostApiAuthResetResponse
func (c *ClientWithResponses) PostApiAuthResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthResetResponse, error) {
	rsp, err := c.PostApiAuthResetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthResetResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthResetWithResponse(ctx context.Context, body PostApiAuthResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResetResponse, error) {
	rsp, err := c.PostApiAuthReset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthResetResponse(rsp)
}

// PutApiAuthResetTokenWithBodyWithResponse request with arbitrary body returning *PutApiAuthResetTokenResponse
func (c *ClientWithResponses) PutApiAuthResetTokenWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiAuthResetTokenResponse, error) {
	rsp, err := c.PutApiAuthResetTokenWithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiAuthResetTokenResponse(rsp)
}

func (c *ClientWithResponses) PutApiAuthResetTokenWithResponse(ctx context.Context, token string, body PutApiAuthResetTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiAuthResetTokenResponse, error) {
	rsp, err := c.PutApiAuthResetToken(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiAuthResetTokenResponse(rsp)
}

// PostApiAuthVerifyWithResponse request returning *PostApiAuthVerifyResponse
func (c *ClientWithResponses) PostApiAuthVerifyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiAuthVerifyResponse, error) {
	rsp, err := c.PostApiAuthVerify(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthVerifyResponse(rsp)
}

// GetApiAuthVerifyTokenWithResponse request returning *GetApiAuthVerifyTokenResponse
func (c *ClientWithResponses) GetApiAuthVerifyTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*GetApiAuthVerifyTokenResponse, error) {
	rsp, err := c.GetApiAuthVerifyToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAuthVerifyTokenResponse(rsp)
}

// GetApiBillsWithResponse request returning *GetApiBillsResponse
func (c *ClientWithResponses) GetApiBillsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiBillsResponse, error) {
	rsp, err := c.GetApiBills(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBillsResponse(rsp)
}

// PostApiBillsWithBodyWithResponse request with arbitrary body returning *PostApiBillsResponse
func (c *ClientWithResponses) PostApiBillsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBillsResponse, error) {
	rsp, err := c.PostApiBillsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBillsResponse(rsp)
}

func (c *ClientWithResponses) PostApiBillsWithResponse(ctx context.Context, body PostApiBillsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBillsResponse, error) {
	rsp, err := c.PostApiBills(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBillsResponse(rsp)
}

// DeleteApiBillsIdWithResponse request returning *DeleteApiBillsIdResponse
func (c *ClientWithResponses) DeleteApiBillsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiBillsIdResponse, error) {
	rsp, err := c.DeleteApiBillsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiBillsIdResponse(rsp)
}

// GetApiBillsIdWithResponse request returning *GetApiBillsIdResponse
func (c *ClientWithResponses) GetApiBillsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiBillsIdResponse, error) {
	rsp, err := c.GetApiBillsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBillsIdResponse(rsp)
}

// PutApiBillsIdWithBodyWithResponse request with arbitrary body returning *PutApiBillsIdResponse
func (c *ClientWithResponses) PutApiBillsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiBillsIdResponse, error) {
	rsp, err := c.PutApiBillsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiBillsIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiBillsIdWithResponse(ctx context.Context, id string, body PutApiBillsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiBillsIdResponse, error) {
	rsp, err := c.PutApiBillsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiBillsIdResponse(rsp)
}

// PostApiBillsIdPayWithResponse request returning *PostApiBillsIdPayResponse
func (c *ClientWithResponses) PostApiBillsIdPayWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiBillsIdPayResponse, error) {
	rsp, err := c.PostApiBillsIdPay(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBillsIdPayResponse(rsp)
}

// GetApiFeedbackWithResponse request returning *GetApiFeedbackResponse
func (c *ClientWithResponses) GetApiFeedbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiFeedbackResponse, error) {
	rsp, err := c.GetApiFeedback(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiFeedbackResponse(rsp)
}

// PostApiFeedbackWithBodyWithResponse request with arbitrary body returning *PostApiFeedbackResponse
func (c *ClientWithResponses) PostApiFeedbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiFeedbackResponse, error) {
	rsp, err := c.PostApiFeedbackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiFeedbackResponse(rsp)
}

func (c *ClientWithResponses) PostApiFeedbackWithResponse(ctx context.Context, body PostApiFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiFeedbackResponse, error) {
	rsp, err := c.PostApiFeedback(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiFeedbackResponse(rsp)
}

// DeleteApiFeedbackIdWithResponse request returning *DeleteApiFeedbackIdResponse
func (c *ClientWithResponses) DeleteApiFeedbackIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiFeedbackIdResponse, error) {
	rsp, err := c.DeleteApiFeedbackId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiFeedbackIdResponse(rsp)
}

// GetApiFeedbackIdWithResponse request returning *GetApiFeedbackIdResponse
func (c *ClientWithResponses) GetApiFeedbackIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiFeedbackIdResponse, error) {
	rsp, err := c.GetApiFeedbackId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiFeedbackIdResponse(rsp)
}

// GetApiGoalsWithResponse request returning *GetApiGoalsResponse
func (c *ClientWithResponses) GetApiGoalsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiGoalsResponse, error) {
	rsp, err := c.GetApiGoals(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiGoalsResponse(rsp)
}

// PostApiGoalsWithBodyWithResponse request with arbitrary body returning *PostApiGoalsResponse
func (c *ClientWithResponses) PostApiGoalsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiGoalsResponse, error) {
	rsp, err := c.PostApiGoalsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiGoalsResponse(rsp)
}

func (c *ClientWithResponses) PostApiGoalsWithResponse(ctx context.Context, body PostApiGoalsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiGoalsResponse, error) {
	rsp, err := c.PostApiGoals(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiGoalsResponse(rsp)
}

// DeleteApiGoalsIdWithResponse request returning *DeleteApiGoalsIdResponse
func (c *ClientWithResponses) DeleteApiGoalsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiGoalsIdResponse, error) {
	rsp, err := c.DeleteApiGoalsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiGoalsIdResponse(rsp)
}

// GetApiGoalsIdWithResponse request returning *GetApiGoalsIdResponse
func (c *ClientWithResponses) GetApiGoalsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiGoalsIdResponse, error) {
	rsp, err := c.GetApiGoalsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiGoalsIdResponse(rsp)
}

// PutApiGoalsIdWithBodyWithResponse request with arbitrary body returning *PutApiGoalsIdResponse
func (c *ClientWithResponses) PutApiGoalsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiGoalsIdResponse, error) {
	rsp, err := c.PutApiGoalsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiGoalsIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiGoalsIdWithResponse(ctx context.Context, id string, body PutApiGoalsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiGoalsIdResponse, error) {
	rsp, err := c.PutApiGoalsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiGoalsIdResponse(rsp)
}

// GetApiIntegrationsWithResponse request returning *GetApiIntegrationsResponse
func (c *ClientWithResponses) GetApiIntegrationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiIntegrationsResponse, error) {
	rsp, err := c.GetApiIntegrations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiIntegrationsResponse(rsp)
}

// PostApiIntegrationsWithBodyWithResponse request with arbitrary body returning *PostApiIntegrationsResponse
func (c *ClientWithResponses) PostApiIntegrationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiIntegrationsResponse, error) {
	rsp, err := c.PostApiIntegrationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiIntegrationsResponse(rsp)
}

func (c *ClientWithResponses) PostApiIntegrationsWithResponse(ctx context.Context, body PostApiIntegrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiIntegrationsResponse, error) {
	rsp, err := c.PostApiIntegrations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiIntegrationsResponse(rsp)
}

// DeleteApiIntegrationsIdWithResponse request returning *DeleteApiIntegrationsIdResponse
func (c *ClientWithResponses) DeleteApiIntegrationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiIntegrationsIdResponse, error) {
	rsp, err := c.DeleteApiIntegrationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiIntegrationsIdResponse(rsp)
}

// GetApiIntegrationsIdWithResponse request returning *GetApiIntegrationsIdResponse
func (c *ClientWithResponses) GetApiIntegrationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiIntegrationsIdResponse, error) {
	rsp, err := c.GetApiIntegrationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiIntegrationsIdResponse(rsp)
}

// GetApiNotificationsWithResponse request returning *GetApiNotificationsResponse
func (c *ClientWithResponses) GetApiNotificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiNotificationsResponse, error) {
	rsp, err := c.GetApiNotifications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiNotificationsResponse(rsp)
}

// PostApiNotificationsWithBodyWithResponse request with arbitrary body returning *PostApiNotificationsResponse
func (c *ClientWithResponses) PostApiNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiNotificationsResponse, error) {
	rsp, err := c.PostApiNotificationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiNotificationsResponse(rsp)
}

func (c *ClientWithResponses) PostApiNotificationsWithResponse(ctx context.Context, body PostApiNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiNotificationsResponse, error) {
	rsp, err := c.PostApiNotifications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiNotificationsResponse(rsp)
}

// DeleteApiNotificationsIdWithResponse request returning *DeleteApiNotificationsIdResponse
func (c *ClientWithResponses) DeleteApiNotificationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiNotificationsIdResponse, error) {
	rsp, err := c.DeleteApiNotificationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiNotificationsIdResponse(rsp)
}

// GetApiNotificationsIdWithResponse request returning *GetApiNotificationsIdResponse
func (c *ClientWithResponses) GetApiNotificationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiNotificationsIdResponse, error) {
	rsp, err := c.GetApiNotificationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiNotificationsIdResponse(rsp)
}

// GetApiReportsWithResponse request returning *GetApiReportsResponse
func (c *ClientWithResponses) GetApiReportsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiReportsResponse, error) {
	rsp, err := c.GetApiReports(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiReportsResponse(rsp)
}

// PostApiReportsWithBodyWithResponse request with arbitrary body returning *PostApiReportsResponse
func (c *ClientWithResponses) PostApiReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiReportsResponse, error) {
	rsp, err := c.PostApiReportsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiReportsResponse(rsp)
}

func (c *ClientWithResponses) PostApiReportsWithResponse(ctx context.Context, body PostApiReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiReportsResponse, error) {
	rsp, err := c.PostApiReports(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiReportsResponse(rsp)
}

// DeleteApiReportsIdWithResponse request returning *DeleteApiReportsIdResponse
func (c *ClientWithResponses) DeleteApiReportsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiReportsIdResponse, error) {
	rsp, err := c.DeleteApiReportsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiReportsIdResponse(rsp)
}

// GetApiReportsIdWithResponse request returning *GetApiReportsIdResponse
func (c *ClientWithResponses) GetApiReportsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiReportsIdResponse, error) {
	rsp, err := c.GetApiReportsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiReportsIdResponse(rsp)
}

// ParsePostApiAuthLoginResponse parses an HTTP response from a PostApiAuthLoginWithResponse call
func ParsePostApiAuthLoginResponse(rsp *http.Response) (*PostApiAuthLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiAuthLogoutResponse parses an HTTP response from a PostApiAuthLogoutWithResponse call
func ParsePostApiAuthLogoutResponse(rsp *http.Response) (*PostApiAuthLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiAuthProfileResponse parses an HTTP response from a GetApiAuthProfileWithResponse call
func ParseGetApiAuthProfileResponse(rsp *http.Response) (*GetApiAuthProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAuthProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiAuthProfileResponse parses an HTTP response from a PutApiAuthProfileWithResponse call
func ParsePutApiAuthProfileResponse(rsp *http.Response) (*PutApiAuthProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiAuthProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiAuthRefreshResponse parses an HTTP response from a PostApiAuthRefreshWithResponse call
func ParsePostApiAuthRefreshResponse(rsp *http.Response) (*PostApiAuthRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiAuthRegisterResponse parses an HTTP response from a PostApiAuthRegisterWithResponse call
func ParsePostApiAuthRegisterResponse(rsp *http.Response) (*PostApiAuthRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiAuthResetResponse parses an HTTP response from a PostApiAuthResetWithResponse call
func ParsePostApiAuthResetResponse(rsp *http.Response) (*PostApiAuthResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiAuthResetTokenResponse parses an HTTP response from a PutApiAuthResetTokenWithResponse call
func ParsePutApiAuthResetTokenResponse(rsp *http.Response) (*PutApiAuthResetTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiAuthResetTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiAuthVerifyResponse parses an HTTP response from a PostApiAuthVerifyWithResponse call
func ParsePostApiAuthVerifyResponse(rsp *http.Response) (*PostApiAuthVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiAuthVerifyTokenResponse parses an HTTP response from a GetApiAuthVerifyTokenWithResponse call
func ParseGetApiAuthVerifyTokenResponse(rsp *http.Response) (*GetApiAuthVerifyTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAuthVerifyTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiBillsResponse parses an HTTP response from a GetApiBillsWithResponse call
func ParseGetApiBillsResponse(rsp *http.Response) (*GetApiBillsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBillsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBillsResponse parses an HTTP response from a PostApiBillsWithResponse call
func ParsePostApiBillsResponse(rsp *http.Response) (*PostApiBillsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBillsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiBillsIdResponse parses an HTTP response from a DeleteApiBillsIdWithResponse call
func ParseDeleteApiBillsIdResponse(rsp *http.Response) (*DeleteApiBillsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiBillsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiBillsIdResponse parses an HTTP response from a GetApiBillsIdWithResponse call
func ParseGetApiBillsIdResponse(rsp *http.Response) (*GetApiBillsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBillsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiBillsIdResponse parses an HTTP response from a PutApiBillsIdWithResponse call
func ParsePutApiBillsIdResponse(rsp *http.Response) (*PutApiBillsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiBillsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBillsIdPayResponse parses an HTTP response from a PostApiBillsIdPayWithResponse call
func ParsePostApiBillsIdPayResponse(rsp *http.Response) (*PostApiBillsIdPayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBillsIdPayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiFeedbackResponse parses an HTTP response from a GetApiFeedbackWithResponse call
func ParseGetApiFeedbackResponse(rsp *http.Response) (*GetApiFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiFeedbackResponse parses an HTTP response from a PostApiFeedbackWithResponse call
func ParsePostApiFeedbackResponse(rsp *http.Response) (*PostApiFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiFeedbackIdResponse parses an HTTP response from a DeleteApiFeedbackIdWithResponse call
func ParseDeleteApiFeedbackIdResponse(rsp *http.Response) (*DeleteApiFeedbackIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiFeedbackIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiFeedbackIdResponse parses an HTTP response from a GetApiFeedbackIdWithResponse call
func ParseGetApiFeedbackIdResponse(rsp *http.Response) (*GetApiFeedbackIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiFeedbackIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiGoalsResponse parses an HTTP response from a GetApiGoalsWithResponse call
func ParseGetApiGoalsResponse(rsp *http.Response) (*GetApiGoalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiGoalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiGoalsResponse parses an HTTP response from a PostApiGoalsWithResponse call
func ParsePostApiGoalsResponse(rsp *http.Response) (*PostApiGoalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiGoalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiGoalsIdResponse parses an HTTP response from a DeleteApiGoalsIdWithResponse call
func ParseDeleteApiGoalsIdResponse(rsp *http.Response) (*DeleteApiGoalsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiGoalsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiGoalsIdResponse parses an HTTP response from a GetApiGoalsIdWithResponse call
func ParseGetApiGoalsIdResponse(rsp *http.Response) (*GetApiGoalsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiGoalsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiGoalsIdResponse parses an HTTP response from a PutApiGoalsIdWithResponse call
func ParsePutApiGoalsIdResponse(rsp *http.Response) (*PutApiGoalsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiGoalsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiIntegrationsResponse parses an HTTP response from a GetApiIntegrationsWithResponse call
func ParseGetApiIntegrationsResponse(rsp *http.Response) (*GetApiIntegrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiIntegrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiIntegrationsResponse parses an HTTP response from a PostApiIntegrationsWithResponse call
func ParsePostApiIntegrationsResponse(rsp *http.Response) (*PostApiIntegrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiIntegrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiIntegrationsIdResponse parses an HTTP response from a DeleteApiIntegrationsIdWithResponse call
func ParseDeleteApiIntegrationsIdResponse(rsp *http.Response) (*DeleteApiIntegrationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiIntegrationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiIntegrationsIdResponse parses an HTTP response from a GetApiIntegrationsIdWithResponse call
func ParseGetApiIntegrationsIdResponse(rsp *http.Response) (*GetApiIntegrationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiIntegrationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiNotificationsResponse parses an HTTP response from a GetApiNotificationsWithResponse call
func ParseGetApiNotificationsResponse(rsp *http.Response) (*GetApiNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiNotificationsResponse parses an HTTP response from a PostApiNotificationsWithResponse call
func ParsePostApiNotificationsResponse(rsp *http.Response) (*PostApiNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiNotificationsIdResponse parses an HTTP response from a DeleteApiNotificationsIdWithResponse call
func ParseDeleteApiNotificationsIdResponse(rsp *http.Response) (*DeleteApiNotificationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiNotificationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiNotificationsIdResponse parses an HTTP response from a GetApiNotificationsIdWithResponse call
func ParseGetApiNotificationsIdResponse(rsp *http.Response) (*GetApiNotificationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiNotificationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiReportsResponse parses an HTTP response from a GetApiReportsWithResponse call
func ParseGetApiReportsResponse(rsp *http.Response) (*GetApiReportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiReportsResponse parses an HTTP response from a PostApiReportsWithResponse call
func ParsePostApiReportsResponse(rsp *http.Response) (*PostApiReportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiReportsIdResponse parses an HTTP response from a DeleteApiReportsIdWithResponse call
func ParseDeleteApiReportsIdResponse(rsp *http.Response) (*DeleteApiReportsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiReportsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiReportsIdResponse parses an HTTP response from a GetApiReportsIdWithResponse call
func ParseGetApiReportsIdResponse(rsp *http.Response) (*GetApiReportsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiReportsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
